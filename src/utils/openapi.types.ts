/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/': {
    get: {
      responses: {
        /** OK */
        200: unknown
      }
    }
  }
  '/service_requests': {
    get: {
      parameters: {
        query: {
          description?: parameters['rowFilter.service_requests.description']
          status__old_id?: parameters['rowFilter.service_requests.status__old_id']
          date_created?: parameters['rowFilter.service_requests.date_created']
          date_updated?: parameters['rowFilter.service_requests.date_updated']
          requested_by?: parameters['rowFilter.service_requests.requested_by']
          technician_id?: parameters['rowFilter.service_requests.technician_id']
          location_id?: parameters['rowFilter.service_requests.location_id']
          service_type_id?: parameters['rowFilter.service_requests.service_type_id']
          status_id?: parameters['rowFilter.service_requests.status_id']
          completed?: parameters['rowFilter.service_requests.completed']
          id?: parameters['rowFilter.service_requests.id']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['service_requests'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** service_requests */
          service_requests?: definitions['service_requests']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferPost']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          description?: parameters['rowFilter.service_requests.description']
          status__old_id?: parameters['rowFilter.service_requests.status__old_id']
          date_created?: parameters['rowFilter.service_requests.date_created']
          date_updated?: parameters['rowFilter.service_requests.date_updated']
          requested_by?: parameters['rowFilter.service_requests.requested_by']
          technician_id?: parameters['rowFilter.service_requests.technician_id']
          location_id?: parameters['rowFilter.service_requests.location_id']
          service_type_id?: parameters['rowFilter.service_requests.service_type_id']
          status_id?: parameters['rowFilter.service_requests.status_id']
          completed?: parameters['rowFilter.service_requests.completed']
          id?: parameters['rowFilter.service_requests.id']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          description?: parameters['rowFilter.service_requests.description']
          status__old_id?: parameters['rowFilter.service_requests.status__old_id']
          date_created?: parameters['rowFilter.service_requests.date_created']
          date_updated?: parameters['rowFilter.service_requests.date_updated']
          requested_by?: parameters['rowFilter.service_requests.requested_by']
          technician_id?: parameters['rowFilter.service_requests.technician_id']
          location_id?: parameters['rowFilter.service_requests.location_id']
          service_type_id?: parameters['rowFilter.service_requests.service_type_id']
          status_id?: parameters['rowFilter.service_requests.status_id']
          completed?: parameters['rowFilter.service_requests.completed']
          id?: parameters['rowFilter.service_requests.id']
        }
        body: {
          /** service_requests */
          service_requests?: definitions['service_requests']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/statuses': {
    get: {
      parameters: {
        query: {
          status_name?: parameters['rowFilter.statuses.status_name']
          id?: parameters['rowFilter.statuses.id']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['statuses'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** statuses */
          statuses?: definitions['statuses']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferPost']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          status_name?: parameters['rowFilter.statuses.status_name']
          id?: parameters['rowFilter.statuses.id']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          status_name?: parameters['rowFilter.statuses.status_name']
          id?: parameters['rowFilter.statuses.id']
        }
        body: {
          /** statuses */
          statuses?: definitions['statuses']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/foo': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.foo.id']
          created_at?: parameters['rowFilter.foo.created_at']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['foo'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** foo */
          foo?: definitions['foo']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferPost']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.foo.id']
          created_at?: parameters['rowFilter.foo.created_at']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.foo.id']
          created_at?: parameters['rowFilter.foo.created_at']
        }
        body: {
          /** foo */
          foo?: definitions['foo']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/locations': {
    get: {
      parameters: {
        query: {
          location_name?: parameters['rowFilter.locations.location_name']
          street_address?: parameters['rowFilter.locations.street_address']
          city?: parameters['rowFilter.locations.city']
          state_province?: parameters['rowFilter.locations.state_province']
          postal_code?: parameters['rowFilter.locations.postal_code']
          unit_number?: parameters['rowFilter.locations.unit_number']
          notes?: parameters['rowFilter.locations.notes']
          id?: parameters['rowFilter.locations.id']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['locations'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** locations */
          locations?: definitions['locations']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferPost']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          location_name?: parameters['rowFilter.locations.location_name']
          street_address?: parameters['rowFilter.locations.street_address']
          city?: parameters['rowFilter.locations.city']
          state_province?: parameters['rowFilter.locations.state_province']
          postal_code?: parameters['rowFilter.locations.postal_code']
          unit_number?: parameters['rowFilter.locations.unit_number']
          notes?: parameters['rowFilter.locations.notes']
          id?: parameters['rowFilter.locations.id']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          location_name?: parameters['rowFilter.locations.location_name']
          street_address?: parameters['rowFilter.locations.street_address']
          city?: parameters['rowFilter.locations.city']
          state_province?: parameters['rowFilter.locations.state_province']
          postal_code?: parameters['rowFilter.locations.postal_code']
          unit_number?: parameters['rowFilter.locations.unit_number']
          notes?: parameters['rowFilter.locations.notes']
          id?: parameters['rowFilter.locations.id']
        }
        body: {
          /** locations */
          locations?: definitions['locations']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/rental_lessee': {
    get: {
      parameters: {
        query: {
          rental_id?: parameters['rowFilter.rental_lessee.rental_id']
          lessee_id?: parameters['rowFilter.rental_lessee.lessee_id']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['rental_lessee'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** rental_lessee */
          rental_lessee?: definitions['rental_lessee']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferPost']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          rental_id?: parameters['rowFilter.rental_lessee.rental_id']
          lessee_id?: parameters['rowFilter.rental_lessee.lessee_id']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          rental_id?: parameters['rowFilter.rental_lessee.rental_id']
          lessee_id?: parameters['rowFilter.rental_lessee.lessee_id']
        }
        body: {
          /** rental_lessee */
          rental_lessee?: definitions['rental_lessee']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/payment_method': {
    get: {
      parameters: {
        query: {
          method_id?: parameters['rowFilter.payment_method.method_id']
          payment_method_stripe?: parameters['rowFilter.payment_method.payment_method_stripe']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['payment_method'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** payment_method */
          payment_method?: definitions['payment_method']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferPost']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          method_id?: parameters['rowFilter.payment_method.method_id']
          payment_method_stripe?: parameters['rowFilter.payment_method.payment_method_stripe']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          method_id?: parameters['rowFilter.payment_method.method_id']
          payment_method_stripe?: parameters['rowFilter.payment_method.payment_method_stripe']
        }
        body: {
          /** payment_method */
          payment_method?: definitions['payment_method']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/lessee': {
    get: {
      parameters: {
        query: {
          lessee_id?: parameters['rowFilter.lessee.lessee_id']
          first_name?: parameters['rowFilter.lessee.first_name']
          last_name?: parameters['rowFilter.lessee.last_name']
          date_of_birth?: parameters['rowFilter.lessee.date_of_birth']
          email_address?: parameters['rowFilter.lessee.email_address']
          phone_number?: parameters['rowFilter.lessee.phone_number']
          secondary_phone_number?: parameters['rowFilter.lessee.secondary_phone_number']
          occupation?: parameters['rowFilter.lessee.occupation']
          emergency_contact?: parameters['rowFilter.lessee.emergency_contact']
          emergency_contact_phone_number?: parameters['rowFilter.lessee.emergency_contact_phone_number']
          lease_start_date?: parameters['rowFilter.lessee.lease_start_date']
          lease_end_date?: parameters['rowFilter.lessee.lease_end_date']
          monthly_rent_amount?: parameters['rowFilter.lessee.monthly_rent_amount']
          payment_due_day?: parameters['rowFilter.lessee.payment_due_day']
          security_deposit?: parameters['rowFilter.lessee.security_deposit']
          lease_status?: parameters['rowFilter.lessee.lease_status']
          move_in_date?: parameters['rowFilter.lessee.move_in_date']
          move_out_date?: parameters['rowFilter.lessee.move_out_date']
          notes?: parameters['rowFilter.lessee.notes']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['lessee'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** lessee */
          lessee?: definitions['lessee']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferPost']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          lessee_id?: parameters['rowFilter.lessee.lessee_id']
          first_name?: parameters['rowFilter.lessee.first_name']
          last_name?: parameters['rowFilter.lessee.last_name']
          date_of_birth?: parameters['rowFilter.lessee.date_of_birth']
          email_address?: parameters['rowFilter.lessee.email_address']
          phone_number?: parameters['rowFilter.lessee.phone_number']
          secondary_phone_number?: parameters['rowFilter.lessee.secondary_phone_number']
          occupation?: parameters['rowFilter.lessee.occupation']
          emergency_contact?: parameters['rowFilter.lessee.emergency_contact']
          emergency_contact_phone_number?: parameters['rowFilter.lessee.emergency_contact_phone_number']
          lease_start_date?: parameters['rowFilter.lessee.lease_start_date']
          lease_end_date?: parameters['rowFilter.lessee.lease_end_date']
          monthly_rent_amount?: parameters['rowFilter.lessee.monthly_rent_amount']
          payment_due_day?: parameters['rowFilter.lessee.payment_due_day']
          security_deposit?: parameters['rowFilter.lessee.security_deposit']
          lease_status?: parameters['rowFilter.lessee.lease_status']
          move_in_date?: parameters['rowFilter.lessee.move_in_date']
          move_out_date?: parameters['rowFilter.lessee.move_out_date']
          notes?: parameters['rowFilter.lessee.notes']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          lessee_id?: parameters['rowFilter.lessee.lessee_id']
          first_name?: parameters['rowFilter.lessee.first_name']
          last_name?: parameters['rowFilter.lessee.last_name']
          date_of_birth?: parameters['rowFilter.lessee.date_of_birth']
          email_address?: parameters['rowFilter.lessee.email_address']
          phone_number?: parameters['rowFilter.lessee.phone_number']
          secondary_phone_number?: parameters['rowFilter.lessee.secondary_phone_number']
          occupation?: parameters['rowFilter.lessee.occupation']
          emergency_contact?: parameters['rowFilter.lessee.emergency_contact']
          emergency_contact_phone_number?: parameters['rowFilter.lessee.emergency_contact_phone_number']
          lease_start_date?: parameters['rowFilter.lessee.lease_start_date']
          lease_end_date?: parameters['rowFilter.lessee.lease_end_date']
          monthly_rent_amount?: parameters['rowFilter.lessee.monthly_rent_amount']
          payment_due_day?: parameters['rowFilter.lessee.payment_due_day']
          security_deposit?: parameters['rowFilter.lessee.security_deposit']
          lease_status?: parameters['rowFilter.lessee.lease_status']
          move_in_date?: parameters['rowFilter.lessee.move_in_date']
          move_out_date?: parameters['rowFilter.lessee.move_out_date']
          notes?: parameters['rowFilter.lessee.notes']
        }
        body: {
          /** lessee */
          lessee?: definitions['lessee']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/lessee_payment_method': {
    get: {
      parameters: {
        query: {
          lessee_id?: parameters['rowFilter.lessee_payment_method.lessee_id']
          method_id?: parameters['rowFilter.lessee_payment_method.method_id']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['lessee_payment_method'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** lessee_payment_method */
          lessee_payment_method?: definitions['lessee_payment_method']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferPost']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          lessee_id?: parameters['rowFilter.lessee_payment_method.lessee_id']
          method_id?: parameters['rowFilter.lessee_payment_method.method_id']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          lessee_id?: parameters['rowFilter.lessee_payment_method.lessee_id']
          method_id?: parameters['rowFilter.lessee_payment_method.method_id']
        }
        body: {
          /** lessee_payment_method */
          lessee_payment_method?: definitions['lessee_payment_method']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/service_types': {
    get: {
      parameters: {
        query: {
          service_name?: parameters['rowFilter.service_types.service_name']
          id?: parameters['rowFilter.service_types.id']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['service_types'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** service_types */
          service_types?: definitions['service_types']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferPost']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          service_name?: parameters['rowFilter.service_types.service_name']
          id?: parameters['rowFilter.service_types.id']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          service_name?: parameters['rowFilter.service_types.service_name']
          id?: parameters['rowFilter.service_types.id']
        }
        body: {
          /** service_types */
          service_types?: definitions['service_types']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/notes': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.notes.id']
          title?: parameters['rowFilter.notes.title']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['notes'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** notes */
          notes?: definitions['notes']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferPost']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.notes.id']
          title?: parameters['rowFilter.notes.title']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.notes.id']
          title?: parameters['rowFilter.notes.title']
        }
        body: {
          /** notes */
          notes?: definitions['notes']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/todo': {
    get: {
      parameters: {
        query: {
          id?: parameters['rowFilter.todo.id']
          created_at?: parameters['rowFilter.todo.created_at']
          completed?: parameters['rowFilter.todo.completed']
          title?: parameters['rowFilter.todo.title']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['todo'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** todo */
          todo?: definitions['todo']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferPost']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          id?: parameters['rowFilter.todo.id']
          created_at?: parameters['rowFilter.todo.created_at']
          completed?: parameters['rowFilter.todo.completed']
          title?: parameters['rowFilter.todo.title']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          id?: parameters['rowFilter.todo.id']
          created_at?: parameters['rowFilter.todo.created_at']
          completed?: parameters['rowFilter.todo.completed']
          title?: parameters['rowFilter.todo.title']
        }
        body: {
          /** todo */
          todo?: definitions['todo']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/tenants': {
    get: {
      parameters: {
        query: {
          name?: parameters['rowFilter.tenants.name']
          email?: parameters['rowFilter.tenants.email']
          id?: parameters['rowFilter.tenants.id']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['tenants'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** tenants */
          tenants?: definitions['tenants']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferPost']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          name?: parameters['rowFilter.tenants.name']
          email?: parameters['rowFilter.tenants.email']
          id?: parameters['rowFilter.tenants.id']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          name?: parameters['rowFilter.tenants.name']
          email?: parameters['rowFilter.tenants.email']
          id?: parameters['rowFilter.tenants.id']
        }
        body: {
          /** tenants */
          tenants?: definitions['tenants']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/technicians': {
    get: {
      parameters: {
        query: {
          name?: parameters['rowFilter.technicians.name']
          email?: parameters['rowFilter.technicians.email']
          id?: parameters['rowFilter.technicians.id']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['technicians'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** technicians */
          technicians?: definitions['technicians']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferPost']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          name?: parameters['rowFilter.technicians.name']
          email?: parameters['rowFilter.technicians.email']
          id?: parameters['rowFilter.technicians.id']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          name?: parameters['rowFilter.technicians.name']
          email?: parameters['rowFilter.technicians.email']
          id?: parameters['rowFilter.technicians.id']
        }
        body: {
          /** technicians */
          technicians?: definitions['technicians']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
  '/rental_property': {
    get: {
      parameters: {
        query: {
          property_id?: parameters['rowFilter.rental_property.property_id']
          street_address?: parameters['rowFilter.rental_property.street_address']
          city?: parameters['rowFilter.rental_property.city']
          state_province?: parameters['rowFilter.rental_property.state_province']
          postal_code?: parameters['rowFilter.rental_property.postal_code']
          unit_number?: parameters['rowFilter.rental_property.unit_number']
          notes?: parameters['rowFilter.rental_property.notes']
          /** Filtering Columns */
          select?: parameters['select']
          /** Ordering */
          order?: parameters['order']
          /** Limiting and Pagination */
          offset?: parameters['offset']
          /** Limiting and Pagination */
          limit?: parameters['limit']
        }
        header: {
          /** Limiting and Pagination */
          Range?: parameters['range']
          /** Limiting and Pagination */
          'Range-Unit'?: parameters['rangeUnit']
          /** Preference */
          Prefer?: parameters['preferCount']
        }
      }
      responses: {
        /** OK */
        200: {
          schema: definitions['rental_property'][]
        }
        /** Partial Content */
        206: unknown
      }
    }
    post: {
      parameters: {
        body: {
          /** rental_property */
          rental_property?: definitions['rental_property']
        }
        query: {
          /** Filtering Columns */
          select?: parameters['select']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferPost']
        }
      }
      responses: {
        /** Created */
        201: unknown
      }
    }
    delete: {
      parameters: {
        query: {
          property_id?: parameters['rowFilter.rental_property.property_id']
          street_address?: parameters['rowFilter.rental_property.street_address']
          city?: parameters['rowFilter.rental_property.city']
          state_province?: parameters['rowFilter.rental_property.state_province']
          postal_code?: parameters['rowFilter.rental_property.postal_code']
          unit_number?: parameters['rowFilter.rental_property.unit_number']
          notes?: parameters['rowFilter.rental_property.notes']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
    patch: {
      parameters: {
        query: {
          property_id?: parameters['rowFilter.rental_property.property_id']
          street_address?: parameters['rowFilter.rental_property.street_address']
          city?: parameters['rowFilter.rental_property.city']
          state_province?: parameters['rowFilter.rental_property.state_province']
          postal_code?: parameters['rowFilter.rental_property.postal_code']
          unit_number?: parameters['rowFilter.rental_property.unit_number']
          notes?: parameters['rowFilter.rental_property.notes']
        }
        body: {
          /** rental_property */
          rental_property?: definitions['rental_property']
        }
        header: {
          /** Preference */
          Prefer?: parameters['preferReturn']
        }
      }
      responses: {
        /** No Content */
        204: never
      }
    }
  }
}

export interface definitions {
  service_requests: {
    /** Format: text */
    description?: string
    /** Format: integer */
    status__old_id?: number
    /**
     * Format: timestamp without time zone
     * @default CURRENT_TIMESTAMP
     */
    date_created?: string
    /**
     * Format: timestamp without time zone
     * @default CURRENT_TIMESTAMP
     */
    date_updated?: string
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `tenants.id`.<fk table='tenants' column='id'/>
     * @default auth.uid()
     */
    requested_by?: string
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `technicians.id`.<fk table='technicians' column='id'/>
     * @default gen_random_uuid()
     */
    technician_id?: string
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `locations.id`.<fk table='locations' column='id'/>
     * @default gen_random_uuid()
     */
    location_id?: string
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `service_types.id`.<fk table='service_types' column='id'/>
     * @default gen_random_uuid()
     */
    service_type_id?: string
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `statuses.id`.<fk table='statuses' column='id'/>
     * @default gen_random_uuid()
     */
    status_id?: string
    /**
     * Format: boolean
     * @default false
     */
    completed?: boolean
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string
  }
  statuses: {
    /** Format: character varying */
    status_name: string
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string
  }
  /** @description FooTable */
  foo: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string
  }
  locations: {
    /** Format: character varying */
    location_name: string
    /** Format: character varying */
    street_address: string
    /** Format: character varying */
    city: string
    /** Format: character varying */
    state_province: string
    /** Format: character varying */
    postal_code: string
    /** Format: character varying */
    unit_number?: string
    /** Format: text */
    notes?: string
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string
  }
  rental_lessee: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `rental_property.property_id`.<fk table='rental_property' column='property_id'/>
     */
    rental_id: number
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `lessee.lessee_id`.<fk table='lessee' column='lessee_id'/>
     */
    lessee_id: number
  }
  payment_method: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    method_id: number
    /** Format: character varying */
    payment_method_stripe: string
  }
  lessee: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    lessee_id: number
    /** Format: character varying */
    first_name: string
    /** Format: character varying */
    last_name: string
    /** Format: date */
    date_of_birth?: string
    /** Format: character varying */
    email_address?: string
    /** Format: character varying */
    phone_number?: string
    /** Format: character varying */
    secondary_phone_number?: string
    /** Format: character varying */
    occupation?: string
    /** Format: character varying */
    emergency_contact?: string
    /** Format: character varying */
    emergency_contact_phone_number?: string
    /** Format: date */
    lease_start_date?: string
    /** Format: date */
    lease_end_date?: string
    /** Format: numeric */
    monthly_rent_amount?: number
    /** Format: integer */
    payment_due_day?: number
    /** Format: numeric */
    security_deposit?: number
    /** Format: character varying */
    lease_status?: string
    /** Format: date */
    move_in_date?: string
    /** Format: date */
    move_out_date?: string
    /** Format: text */
    notes?: string
  }
  lessee_payment_method: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `lessee.lessee_id`.<fk table='lessee' column='lessee_id'/>
     */
    lessee_id: number
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     * This is a Foreign Key to `payment_method.method_id`.<fk table='payment_method' column='method_id'/>
     */
    method_id: number
  }
  service_types: {
    /** Format: character varying */
    service_name: string
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string
  }
  notes: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number
    /** Format: text */
    title?: string
  }
  todo: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string
    /**
     * Format: boolean
     * @default false
     */
    completed?: boolean
    /** Format: text */
    title?: string
  }
  tenants: {
    /** Format: character varying */
    name: string
    /** Format: character varying */
    email?: string
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default auth.uid()
     */
    id: string
  }
  technicians: {
    /** Format: character varying */
    name: string
    /** Format: character varying */
    email?: string
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default gen_random_uuid()
     */
    id: string
  }
  rental_property: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    property_id: number
    /** Format: character varying */
    street_address: string
    /** Format: character varying */
    city: string
    /** Format: character varying */
    state_province: string
    /** Format: character varying */
    postal_code: string
    /** Format: character varying */
    unit_number?: string
    /** Format: text */
    notes?: string
  }
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: 'params=single-object'
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: 'return=representation' | 'return=minimal' | 'return=none'
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: 'count=none'
  /**
   * @description Preference
   * @enum {string}
   */
  preferPost:
    | 'return=representation'
    | 'return=minimal'
    | 'return=none'
    | 'resolution=ignore-duplicates'
    | 'resolution=merge-duplicates'
  /** @description Filtering Columns */
  select: string
  /** @description On Conflict */
  on_conflict: string
  /** @description Ordering */
  order: string
  /** @description Limiting and Pagination */
  range: string
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string
  /** @description Limiting and Pagination */
  offset: string
  /** @description Limiting and Pagination */
  limit: string
  /** @description service_requests */
  'body.service_requests': definitions['service_requests']
  /** Format: text */
  'rowFilter.service_requests.description': string
  /** Format: integer */
  'rowFilter.service_requests.status__old_id': string
  /** Format: timestamp without time zone */
  'rowFilter.service_requests.date_created': string
  /** Format: timestamp without time zone */
  'rowFilter.service_requests.date_updated': string
  /** Format: uuid */
  'rowFilter.service_requests.requested_by': string
  /** Format: uuid */
  'rowFilter.service_requests.technician_id': string
  /** Format: uuid */
  'rowFilter.service_requests.location_id': string
  /** Format: uuid */
  'rowFilter.service_requests.service_type_id': string
  /** Format: uuid */
  'rowFilter.service_requests.status_id': string
  /** Format: boolean */
  'rowFilter.service_requests.completed': string
  /** Format: uuid */
  'rowFilter.service_requests.id': string
  /** @description statuses */
  'body.statuses': definitions['statuses']
  /** Format: character varying */
  'rowFilter.statuses.status_name': string
  /** Format: uuid */
  'rowFilter.statuses.id': string
  /** @description foo */
  'body.foo': definitions['foo']
  /** Format: bigint */
  'rowFilter.foo.id': string
  /** Format: timestamp with time zone */
  'rowFilter.foo.created_at': string
  /** @description locations */
  'body.locations': definitions['locations']
  /** Format: character varying */
  'rowFilter.locations.location_name': string
  /** Format: character varying */
  'rowFilter.locations.street_address': string
  /** Format: character varying */
  'rowFilter.locations.city': string
  /** Format: character varying */
  'rowFilter.locations.state_province': string
  /** Format: character varying */
  'rowFilter.locations.postal_code': string
  /** Format: character varying */
  'rowFilter.locations.unit_number': string
  /** Format: text */
  'rowFilter.locations.notes': string
  /** Format: uuid */
  'rowFilter.locations.id': string
  /** @description rental_lessee */
  'body.rental_lessee': definitions['rental_lessee']
  /** Format: integer */
  'rowFilter.rental_lessee.rental_id': string
  /** Format: integer */
  'rowFilter.rental_lessee.lessee_id': string
  /** @description payment_method */
  'body.payment_method': definitions['payment_method']
  /** Format: integer */
  'rowFilter.payment_method.method_id': string
  /** Format: character varying */
  'rowFilter.payment_method.payment_method_stripe': string
  /** @description lessee */
  'body.lessee': definitions['lessee']
  /** Format: integer */
  'rowFilter.lessee.lessee_id': string
  /** Format: character varying */
  'rowFilter.lessee.first_name': string
  /** Format: character varying */
  'rowFilter.lessee.last_name': string
  /** Format: date */
  'rowFilter.lessee.date_of_birth': string
  /** Format: character varying */
  'rowFilter.lessee.email_address': string
  /** Format: character varying */
  'rowFilter.lessee.phone_number': string
  /** Format: character varying */
  'rowFilter.lessee.secondary_phone_number': string
  /** Format: character varying */
  'rowFilter.lessee.occupation': string
  /** Format: character varying */
  'rowFilter.lessee.emergency_contact': string
  /** Format: character varying */
  'rowFilter.lessee.emergency_contact_phone_number': string
  /** Format: date */
  'rowFilter.lessee.lease_start_date': string
  /** Format: date */
  'rowFilter.lessee.lease_end_date': string
  /** Format: numeric */
  'rowFilter.lessee.monthly_rent_amount': string
  /** Format: integer */
  'rowFilter.lessee.payment_due_day': string
  /** Format: numeric */
  'rowFilter.lessee.security_deposit': string
  /** Format: character varying */
  'rowFilter.lessee.lease_status': string
  /** Format: date */
  'rowFilter.lessee.move_in_date': string
  /** Format: date */
  'rowFilter.lessee.move_out_date': string
  /** Format: text */
  'rowFilter.lessee.notes': string
  /** @description lessee_payment_method */
  'body.lessee_payment_method': definitions['lessee_payment_method']
  /** Format: integer */
  'rowFilter.lessee_payment_method.lessee_id': string
  /** Format: integer */
  'rowFilter.lessee_payment_method.method_id': string
  /** @description service_types */
  'body.service_types': definitions['service_types']
  /** Format: character varying */
  'rowFilter.service_types.service_name': string
  /** Format: uuid */
  'rowFilter.service_types.id': string
  /** @description notes */
  'body.notes': definitions['notes']
  /** Format: bigint */
  'rowFilter.notes.id': string
  /** Format: text */
  'rowFilter.notes.title': string
  /** @description todo */
  'body.todo': definitions['todo']
  /** Format: bigint */
  'rowFilter.todo.id': string
  /** Format: timestamp with time zone */
  'rowFilter.todo.created_at': string
  /** Format: boolean */
  'rowFilter.todo.completed': string
  /** Format: text */
  'rowFilter.todo.title': string
  /** @description tenants */
  'body.tenants': definitions['tenants']
  /** Format: character varying */
  'rowFilter.tenants.name': string
  /** Format: character varying */
  'rowFilter.tenants.email': string
  /** Format: uuid */
  'rowFilter.tenants.id': string
  /** @description technicians */
  'body.technicians': definitions['technicians']
  /** Format: character varying */
  'rowFilter.technicians.name': string
  /** Format: character varying */
  'rowFilter.technicians.email': string
  /** Format: uuid */
  'rowFilter.technicians.id': string
  /** @description rental_property */
  'body.rental_property': definitions['rental_property']
  /** Format: integer */
  'rowFilter.rental_property.property_id': string
  /** Format: character varying */
  'rowFilter.rental_property.street_address': string
  /** Format: character varying */
  'rowFilter.rental_property.city': string
  /** Format: character varying */
  'rowFilter.rental_property.state_province': string
  /** Format: character varying */
  'rowFilter.rental_property.postal_code': string
  /** Format: character varying */
  'rowFilter.rental_property.unit_number': string
  /** Format: text */
  'rowFilter.rental_property.notes': string
}

export interface operations {}

export interface external {}
